{"version":3,"sources":["Component/Header/logoCiclic.png","Component/Header/index.js","Component/Button/index.js","Component/Form/index.js","Pages/Result/index.js","Component/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","id","className","src","Logo","alt","Button","props","onClick","handlerSumbit","type","children","Form","name","monthlyPayment","year","changeName","changeMonthlyPayment","changeYear","onSubmit","value","onChange","required","createArr","map","item","key","length","arr","cont","push","Result","result","Previous","Main","App","state","e","this","setState","target","Number","preventDefault","ajax","post","expr","then","response","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98f6ac6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoCiclic.6bdf4297.png\";","import React from 'react';\r\nimport Logo from './logoCiclic.png';\r\nimport './style.css';\r\n\r\nconst Header =()=>(\r\n        <header id=\"header\">\r\n          <img className='logo' src={Logo}  alt='logo' />\r\n        </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Button =(props)=>(\r\n        <button className={'button'} onClick={props.handlerSumbit} type=\"submit\"> {props.children} </button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../Button';\r\nimport './style.css';\r\n\r\nconst Form = ({name, monthlyPayment, year, changeName, changeMonthlyPayment, changeYear, handlerSumbit})=>(\r\n     \t  <form id=\"form\" onSubmit={handlerSumbit} >\r\n          <label>\r\n            Nome:\r\n            <input \r\n             name=\"name\"\r\n             value={name}\r\n             onChange={changeName}\r\n             required\r\n            />    \r\n          </label>\r\n\r\n          <label>\r\n            Mensalidade:\r\n            <input\r\n             name=\"monthlyPayment\"\r\n             type=\"number\"\r\n             value={ monthlyPayment }\r\n             onChange={changeMonthlyPayment}\r\n             required\r\n            />\r\n          </label>\r\n                 \r\n          <label>Tempo:\r\n            <select\r\n             name=\"year\" \r\n             value ={year}\r\n             onChange = {changeYear}\r\n            >\r\n\r\n              { \r\n                Form.createArr(100).map( (item)=>{\r\n                  return <option key={item} value={item}> {item} {item === 1 ? 'ano' : 'anos'} </option>\r\n                })    \r\n              }\r\n\r\n            </select>\r\n          </label>\r\n          <Button> Simular </Button>\r\n     \t\t</form>\r\n);\r\n\r\n\r\nForm.createArr = ( length )=>{\r\n       const arr = [];\r\n       for(let cont = 1;cont<=length;cont++){\r\n         arr.push(cont);\r\n       }\r\n       return arr;\r\n}\r\n\r\n\r\nForm.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    monthlyPayment: PropTypes.string.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    changeName:PropTypes.func.isRequired,\r\n    changeMonthlyPayment:PropTypes.func.isRequired,\r\n    changeYear:PropTypes.func.isRequired,\r\n    handlerSumbit:PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../../Component/Button';\r\nimport './style.css';\r\n\r\nconst Result = ({ name, monthlyPayment, year, result, Previous }) =>(\r\n\t   <div className=\"result\" >\r\n\t     <h1>Olá {name}</h1>\r\n\t     <p>\r\n\t      juntado R${monthlyPayment} todos més,\r\n\t      voce terá R${result} em {year}anos\r\n\t     </p>\r\n         <Button handlerSumbit={Previous} >Simular Novamente</Button>\r\n\t   </div>\t\r\n);\r\n\r\nResult.propTypes = {\r\n\tPrevious:PropTypes.func.isRequired\r\n};\r\n\r\nexport default Result;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from '../Form';\r\nimport Result from '../../Pages/Result';\r\nimport './style.css'\r\n\r\nconst Main =({ name, monthlyPayment, year, changeName, changeMonthlyPayment, changeYear , result, handlerSumbit, Previous }  )=>(\r\n\r\n\t    <main id=\"main\" > \r\n          <div className=\"card\" >\r\n\t \t    { !result  && <h1 className=\"title\"   >Simulador</h1>}\r\n\t \t\r\n\t \t    { !result   &&  \r\n\t \t      <Form\r\n\t \t        name={name}\r\n\t \t        monthlyPayment={monthlyPayment}\r\n\t \t        year={year} \r\n\t \t        changeName ={changeName}\r\n\t \t        changeMonthlyPayment = {changeMonthlyPayment}\r\n\t \t        changeYear ={changeYear}\r\n\t \t        handlerSumbit ={handlerSumbit}\r\n\t \t      />\r\n\t        }\r\n\r\n\t        {\r\n\t          !!result &&\r\n\t          <Result\r\n               name={name}\r\n               monthlyPayment={monthlyPayment}\r\n               year={year}\r\n               result = {result}\r\n               Previous = {Previous}\r\n\t          />\r\n\t        }\r\n          </div>\r\n\t    </main>\r\n)\r\n\r\nMain.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    monthlyPayment:PropTypes.string.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    result:PropTypes.number.isRequired,\r\n    changeName:PropTypes.func.isRequired,\r\n    changeMonthlyPayment:PropTypes.func.isRequired,\r\n    changeYear:PropTypes.func.isRequired,\r\n    handlerSumbit:PropTypes.func.isRequired,\r\n    Previous:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport ajax from '@fdaciuk/ajax';\r\nimport Header from './Component/Header';\r\nimport Main  from  './Component/Main';\r\n\r\nclass App extends React.Component{\r\n    \r\n    constructor(){\r\n    \tsuper();\r\n      this.state={\r\n        name:'',\r\n        monthlyPayment:'',\r\n        year:1,\r\n        result:0\r\n      }     \r\n    }\r\n\r\n    changeName(e){\r\n       this.setState({name:e.target.value});\r\n    }\r\n\r\n    changeMonthlyPayment(e){\r\n       this.setState({monthlyPayment:e.target.value});\r\n    }\r\n\r\n    changeYear(e){\r\n       this.setState({year:Number(e.target.value)});\r\n    }\r\n\r\n    handlerSumbit(e){\r\n       e.preventDefault();\r\n       const { monthlyPayment , year  } = this.state;\r\n       ajax().post('http://api.mathjs.org/v4/.',{expr:`${monthlyPayment} * (((1 + 0.00517) ^ ${year*12} - 1) / 0.00517)`})\r\n       .then((response)=>{\r\n         if(!!this.state.name)\r\n         this.setState({ result: Number(response.result) });\r\n       })\r\n    }\r\n    \r\n    Previous(e){\r\n      e.preventDefault();    \r\n      this.setState({\r\n        name:'',\r\n        monthlyPayment:'',\r\n        year:1,\r\n        result:0\r\n      });\r\n    }\r\n\r\n\r\n    render(){\r\n      return ( \r\n    \t<div className = \"App\" >\r\n          <Header />\r\n          <Main \r\n           name={this.state.name}\r\n           monthlyPayment = {this.state.monthlyPayment}\r\n           year ={this.state.year}\r\n           changeName = {(e)=> this.changeName(e) }\r\n           changeMonthlyPayment = {(e) => this.changeMonthlyPayment(e) }\r\n           changeYear = {(e) => this.changeYear(e) }\r\n           result = {this.state.result}\r\n           handlerSumbit = {(e)=>this.handlerSumbit(e)}\r\n           Previous = {(e)=>this.Previous(e)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './style.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}